#!/usr/bin/python3
"""
a new view for State objects that handles all default RESTFul API actions
"""

import json
from models import storage
from api.v1.views import app_views
from flask import jsonify, abort, request
from models.state import State

@app_views.route("/states", methods=["GET"], strict_slashes=False)
def retrieve_states():
    """
    REtrieve states
    """
    states_list = []
    states = storage.all(State).values()
    for state in states:
        states_list.append(state.to_dict())
    return jsonify(states_list)


@app_views.route("/states/<string:state_id>", methods=["GET"], strict_slashes=False)
def retrieve_state(state_id):
    """
    Retrieves states using the state id
    Raises a 404 error if the id isnt found
    """
    state = storage.get(State, state_id)
    if state:
        return jsonify(state.to_dict())
    else:
        abort(404)

@app_views.route("/states/<string:state_id>", methods=["DELETE"], strict_slashes=False)
def remove_state(state_id):
    """
    Deletes a state using the state id
    Raises a 404nerror if the id isnt found
    """
    state = storage.get(State, state_id)
    if state:
        state.delete()
        storage.save()
        return jsonify({})
    else:
        abort(404)

@app_views.route("/states/", methods=["DELETE"], strict_slashes=False)
def post_state():
    """
    Posts a new state
    """
    if not request.get_json():
        return make_response(jsonify({"error": "NOt a JSON"}), 400)
    if 'name' not in request.get_json():
        return make_response(jsonify({"error": "Missing name"}), 400)

