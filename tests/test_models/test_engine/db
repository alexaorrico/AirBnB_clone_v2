# new tests
class TestDBStorageMethods(unittest.TestCase):
    """Test the new DBStorage methods"""

    def setUp(self):
        """Set up the test environment"""
        self.db_storage = db_storage.DBStorage()
        self.db_storage.reload()

    def test_get_existing_object(self):
        """Test get method with an existing object"""
        state = State(name="California")
        self.db_storage.new(state)
        self.db_storage.save()

        retrieved_state = self.db_storage.get(State, state.id)
        self.assertEqual(retrieved_state, state)

    def test_get_nonexistent_object(self):
        """Test get method with a non-existing object"""
        state = State(name="California")

        retrieved_state = self.db_storage.get(State, state.id)
        self.assertIsNone(retrieved_state)

    def test_count_all_objects(self):
        """Test count method for all objects"""
        count_before = self.db_storage.count()
        state = State(name="California")
        city = City(name="Los Angeles", state_id=state.id)
        self.db_storage.new(state)
        self.db_storage.new(city)
        self.db_storage.save()

        count_after = self.db_storage.count()
        self.assertEqual(count_after, count_before + 2)

    def test_count_objects_by_class(self):
        """Test count method for objects of a specific class"""
        count_before = self.db_storage.count(State)
        state = State(name="California")
        self.db_storage.new(state)
        self.db_storage.save()

        count_after = self.db_storage.count(State)
        self.assertEqual(count_after, count_before + 1)
